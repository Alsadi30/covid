import { QueryClient, useMutation } from "@tanstack/react-query";
import { useStoreState } from "easy-peasy";
import Head from "next/head";
import { useEffect } from "react";
import { createAddress, createOrder } from "../../api/checkout";

import AddressForm from "../../components/addressForm";
import Navbar from "../../components/shared/navbar";
import LoadingSkeleton from "../../components/shared/skeleton";
import Topbar from "../../components/shared/topbar";
import { CheckoutFrame } from "../../components/styles/checkout.styled";
import { Container } from "../../components/styles/Container.styled";
import useTotal from "../../hooks/useTotal";

const Checkout = () =>{

 

    const queryClient =  new QueryClient();
    const {Auth,Cart} = useStoreState(state => state)

   const {refetch,discount,subTotal,total,makesubTotal,makeTotal} = useTotal(Cart.CartProducts, 'covid19')
  
  console.log(discount,subTotal,total)
  
   useEffect(() => {
     makesubTotal()
     makeTotal()
  }, [subTotal,discount])
 
  
    const { mutate, isLoading } = useMutation(createAddress, {
        onSuccess: data => {
          console.log(data)
        mutateOrder({
          data:{
            address: data.data?.data.id,
            sub_total: 400
          },
          userId: Auth?.AuthUser?.id
        })
        },
        onError: () => {
          alert("there was an error")
        },
        onSettled: () => {
          queryClient.invalidateQueries('create');
        }
      });

  
  
      const { mutate:mutateOrder , isLoading:isLoading2 } = useMutation(createOrder, {
        onSuccess: data => {
          console.log(data);
              const message = "success"
          alert(message)
        },
        onError: () => {
          alert("there was an error")
        },
        onSettled: () => {
          queryClient.invalidateQueries('create');
        }
      });

    
    


   
    const onSubmit = async (data) => {
        console.log(data)
        mutate(data,Auth?.AuthUser?.id);
     };

  

     if (isLoading || isLoading2) {
      return  <LoadingSkeleton/>
    }
      
  
  
  

    return (
        <>
          
        <Head>
            <title>CheckOut</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Topbar/>
        <Container>
          <Navbar />
          <CheckoutFrame>
          <AddressForm  onSubmit ={onSubmit}/>
          </CheckoutFrame>
          <button onClick={refetch}> refetch</button>
         </Container>

    </>
    )
}

export default Checkout