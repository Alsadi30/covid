import {loadStripe} from '@stripe/stripe-js';
import {QueryClient, useMutation} from '@tanstack/react-query';
import {useStoreActions, useStoreState} from 'easy-peasy';
import Head from 'next/head';
import {useEffect, useState} from 'react';
import { toast } from 'react-toastify';
import {getCartofUser} from '../../api/cart';
import {createAddress, createOrderItem, handleBuy} from '../../api/checkout';
import AddressForm from '../../components/addressForm';
import OrderItems from '../../components/orderItems/items';
import Footer from '../../components/shared/footer/footer';
import Navbar from '../../components/shared/navbar';
import LoadingSkeleton from '../../components/shared/skeleton';
import Topbar from '../../components/shared/topbar';
import {CheckoutFrame} from '../../components/styles/checkout.styled';
import {Container} from '../../components/styles/Container.styled';
import useTotal from '../../hooks/useTotal';

// Make sure to call `loadStripe` outside of a componentâ€™s render to avoid
// recreating the `Stripe` object on every render.
const stripePromise = loadStripe (
  'pk_test_51JIc4ILGcSzbpHaWTaH3MizuhcquTe1VxzsbVYpVujw7j7CV3XqBle3SpErIyvWnMqz2EhnuJ0lp2MORC0Xtczpw00RFByRCEK'
);

const Checkout = () => {
  const queryClient = new QueryClient ();
  const {Auth, Cart} = useStoreState (state => state);
  const {SetDatabaseCart, DeleteCartThunk} = useStoreActions (
    action => action.Cart
  );
  const [orderdata, setorderData] = useState ({});
  const CartProducts = Cart.CartProducts;

  const {
    checkCoupon,
    discount,
    subTotal,
    total,
    makesubTotal,
    makeTotal,
  } = useTotal (CartProducts);

  useEffect (
    () => {
      makesubTotal ();
      makeTotal ();
    },
    [subTotal, discount, CartProducts]
  );

  useEffect (() => {
    (async () => {
      const cart = await getCartofUser ();
      if (cart) {
        SetDatabaseCart (cart);
      }
    }) ();
  }, []);

  const {mutate, isLoading} = useMutation (createAddress, {
    onSuccess: data => {
      mutateOrder ({
        data: {
          address: data.data.data.id,
          sub_total: subTotal,
          discount: discount,
          total_price: total,
        },
        userId: Auth.AuthUser.id,
      });
    },
    onError: () => {
      toast('there was an error');
    },
    onSettled: () => {
      queryClient.invalidateQueries ('create');
    },
  });

  const {mutate: mutateOrder, isLoading: isLoading2} = useMutation (handleBuy, {
    onSuccess: async data => {
      setorderData ({...orderdata, data});

      let orderItem = CartProducts.map (async item => {
        mutateOrderItem ({
          data: {
            orderId: data.newOrder.id,
            userId: Auth.AuthUser.id,
            productId: item.productId,
            quantity: item.quentity,
          },
        });
      });
      const stripe = await stripePromise;
      const isresolved = Promise.all (orderItem).then (res => {
        DeleteCartThunk (Cart.CartId);
        const result = stripe.redirectToCheckout ({
          sessionId: `${data.id}`,
        });
      });
    },
    onError: () => {
      toast('there was an error');
    },
    onSettled: () => {
      queryClient.invalidateQueries ('create');
    },
  });

  const {
    mutate: mutateOrderItem,
    isLoading: isLoading4,
  } = useMutation (createOrderItem, {
    onSuccess: async data => {},
    onError: () => {
      toast('there was an error');
    },
    onSettled: () => {
      queryClient.invalidateQueries ('create');
    },
  });

  const onSubmit = async data => {
    mutate (data, Auth.AuthUser.id);
  };

  
  if (!Auth.AuthUser.id) {
    return <h1 style={{display: 'center'}}> Please Login First</h1>;
  }


  if (isLoading || isLoading2) {
    return <LoadingSkeleton />;
  }

  return (
    <>

      <Head>
        <title>CheckOut</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Topbar />
      <Container>
        <Navbar />
        <CheckoutFrame>
          <AddressForm onSubmit={onSubmit} />
          <OrderItems
            items={CartProducts}
            discount={discount}
            subTotal={subTotal}
            total={total}
            checkCoupon={checkCoupon}
          />
        </CheckoutFrame>

      </Container>
      <Footer />
    </>
  );
};

export default Checkout;
